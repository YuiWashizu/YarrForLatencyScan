/*
  LatencyAnalysis
*/
#undef fromHitTree_cxx

#include "fromHitTree.h"
#include "TFile.h"
#include "TTree.h"
#include "TH1.h"
#include "TH2.h"
#include "TCanvas.h"
#include <stdio.h>
#include <string>
#include <sstream>
#include <fstream>
#include <iostream>

void CutZeroEvents(std::string fname, int min) {
  std::string fout_name = "./analysis/rootfileout.root";
  std::string fpng_name = "./analysis/rootfileout.png";
  float sec = min*60;

  TFile* f = TFile::Open(fname.c_str(), "READ");
  TTree* t = dynamic_cast<TTree*>(f->Get("HitTree"));
  fromHitTree event(t);
  int ievent;
  long long int nevents = t->GetEntries();
  int ihit;
  TFile* fout = TFile::Open(fout_name.c_str(), "RECREATE");
  TH1* nhits = new TH1F("nhits", "nhits;nhits;events", 10, 0, 10);
  TH1* tot = new TH1F("tot", "ToT;ToT;events", 15, 0, 15);
  TH1* l1dist = new TH1F("l1dist", "L1Dist;L1id;events", 16, 0, 15);
  TH1 *col_dist = new TH1F("col_dist", "HitDist;col;events", 136, 264, 400);
  TH1 *row_dist = new TH1F("row_dist", "HitDist;row;events", 96, 0, 96);
  TH2 *hitmap = new TH2F("hitmap", "HitMap;col;row", 136, 264, 400, 100, 0 ,100);

  // TH2* rowcol = new TH2F("hitrow:col", "", 100, 350, 450, 200, 0, 200);
  int countNonZero = 0;
  float counthit;

  for (ievent=0; ievent<nevents; ievent++) { 
    event.GetEntry(ievent);
    if (event.nhits!=0) {
      countNonZero++;
      nhits->Fill(event.nhits);
      l1dist->Fill(event.hit_l1id%16);
      counthit = counthit + event.nhits;
      for (ihit=0; ihit<event.nhits; ihit++) {
	// std::cout << "hit_col:hitrow = " << event.hit_col[ihit] << ", " << event.hit_row[ihit] << std::endl;
	col_dist->Fill(event.hit_col[ihit], 1/sec);
	row_dist->Fill(event.hit_row[ihit], 1/sec);
	hitmap->Fill(event.hit_col[ihit], event.hit_row[ihit], 1/sec);
	tot->Fill(event.hit_tot[ihit]);
      }
    }
  }    
  std::cout << "AllEvents          = " << nevents << std::endl;
  std::cout << "countNonZeroEvents = " << countNonZero << std::endl;
  std::cout << "num of hits        = " << counthit << std::endl;
  std::cout << "# hits per sec     = " << counthit/(min*60) << std::endl;
  fout->Write();
  std::string command = "mv " + fout_name + " " + fname + "CutZero.root";
  system(command.c_str());
  
  TCanvas* c1 = new TCanvas("c1", "c1", 700, 500);
  nhits->Draw();
  std::string fpng1 = fpng_name + "nhits.png";
  // std::cout << fpng1 << std::endl;
  c1->SaveAs(fpng1.c_str());
  std::string command1 = "mv " + fpng1 + " " + fname + "nhits.png";

  TCanvas* c2 = new TCanvas("c2", "c2", 700, 500);
  hitmap->Draw("colz");
  std::string fpng2 = fpng_name + "hitmap.png";
  // std::cout << fpng2 << std::endl;
  c2->SaveAs(fpng2.c_str());
  std::string command2 = "mv " + fpng2 + " " + fname + "hitmap.png";

  TCanvas* c3 = new TCanvas("c3", "c3", 700, 500);
  l1dist->Draw();
  std::string fpng3 = fpng_name + "l1dist.png";
  // std::cout << fpng3 << std::endl;
  c3->SaveAs(fpng3.c_str());
  std::string command3 = "mv " + fpng3 + " " + fname + "l1dist.png";

  system(command1.c_str());
  system(command2.c_str());
  system(command3.c_str());
  
}




/* for (int filenum=ifilenum; filenum<nfilenum; filenum++) {
    std::cout << "Read File now : " << Form("./latency_rootfile%d/%03d_rootfile.root", id, filenum) <<std::endl;
    TFile* f = TFile::Open(Form("./latency_rootfile%d/%03d_rootfile.root", id, filenum) , "READ");
    TTree* t = dynamic_cast<TTree*>(f->Get("HitTree"));
    
    fromHitTree event(t);
    int ievent;
    long long int nevents = t->GetEntries();
    int ihit;
    int eventcount = 0;
  
    for (ievent=0; ievent<nevents; ievent++) {
      event.GetEntry(ievent);
      if (event.nhits>0) {
	h_events_lat->Fill(filenum);
	h_nhits_lat->Fill(filenum, event.nhits);
      }
    }
    // std::cout << eventcount << std::endl;
    // h_events_lat->Fill(filenum, eventcount);
    // c->Divide(1, 3);
    // c->cd(1);
    // h_nhits->Draw("");
    // c->cd(2);
    // h_tot->Draw("");
    // c->cd(3);
    // h_l1id->Draw("");
    // c->Print(name, "pdf");
  }
  // fout->Write();

  TCanvas* c1 = new TCanvas("c1", "c1", 700, 700);
  h_nhits_lat->Draw("colz");
  TCanvas* c2 = new TCanvas("c2", "c2", 700, 700);
  h_events_lat->Draw("");

  c1->SaveAs(Form("./png/LatencyDelayNhits%d_%d-%d.png", id, ifilenum, nfilenum));
  c2->SaveAs(Form("./png/LatencyDelayEvents%d_%d-%d.png", id, ifilenum, nfilenum));
}

     
*/
